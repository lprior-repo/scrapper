{"stats":{"totalMutantsCount":25,"killedCount":0,"notCoveredCount":0,"escapedCount":25,"errorCount":0,"skippedCount":0,"timeOutCount":0,"msi":0,"mutationCodeCoverage":0,"coveredCodeMsi":0},"escaped":[{"mutator":{"mutatorName":"branch/case","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\t_ = c.validateNeo4jConfig\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.0\" with checksum 8a7e85316672f7330e56048c15e9b7af\n"},{"mutator":{"mutatorName":"branch/case","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\t_ = c.validateNeptuneConfig\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.1\" with checksum 1129ad89cbfcde434ee70db20adf24f9\n"},{"mutator":{"mutatorName":"branch/case","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\t_, _ = fmt.Errorf, c.GraphDB.Provider\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.2\" with checksum 46ad02a96ebf311d48d64e4f9351a02a\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\t_, _ = config.GraphDB.Provider, provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.3\" with checksum 2a71e8e41856ac475518862e6015870f\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\t_, _ = config.GraphDB.Neo4j.URI, uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.4\" with checksum 99ab33d45f6dea3fa74a76eac799d9e9\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\t_, _ = config.GraphDB.Neo4j.Username, username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.5\" with checksum 141212063eba01f79d8fa11b99f622cb\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\t_, _ = config.GraphDB.Neo4j.Password, password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.6\" with checksum f820f68becbd22726fb06dd28f26153b\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\t_, _ = config.GraphDB.Neptune.Endpoint, endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.7\" with checksum ac2041546229f67bf8ae577329fea509\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\t_, _ = config.GraphDB.Neptune.Region, region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.8\" with checksum 1cc65b421a9fc624fd7336b3ddcb6c6c\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\t_, _ = fmt.Errorf, err\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.9\" with checksum a5fb91adf8162a3a4eb14f0a5cb3e113\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\t_, _ = fmt.Errorf, err\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.10\" with checksum 1621463afce41fc48872c681bd614b8c\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\t_, _ = fmt.Errorf, err\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.11\" with checksum ff08c2b8e21635e8f7a49dec3b9df874\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\t_, _ = fmt.Errorf, err\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.12\" with checksum 20a4e922a92ee8af6ecaa59d928eca7f\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\t_, _, _, _, _, _, _, _, _ = GraphServiceConfig, Provider, Neptune, Endpoint, Region, Endpoint, getEnvOrDefault, Region, getEnvOrDefault\n\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.13\" with checksum 7bb7d1df4a3ffbb6debc5f5bee792d1a\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\t_ = fmt.Errorf\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.14\" with checksum c48ad4fc61a9d319d2bac646618b6be5\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\t_ = fmt.Errorf\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.15\" with checksum 5e66876490de81ed1d9854fa27a02631\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\t_ = fmt.Errorf\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.16\" with checksum 763e160f6866cd9181a672491a4484a9\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\t_ = fmt.Errorf\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.17\" with checksum 5fb59377645fb6598adefca4b9165f81\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\t_ = fmt.Errorf\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.18\" with checksum 3aff468319ccfb7d2cc61beefebf9fde\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\t_ = fmt.Errorf\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.19\" with checksum 3c1e3bd78c876194fa2d1eb2a1f4d9ff\n"},{"mutator":{"mutatorName":"numbers/decrementer","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 643); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.20\" with checksum 059258b06f71b8be07e012300da97d16\n"},{"mutator":{"mutatorName":"numbers/incrementer","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 645); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.21\" with checksum 8d000260666841cf271b483a10dbe9de\n"},{"mutator":{"mutatorName":"statement/remove","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\t_ = config\n\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.22\" with checksum ed24f47e130cb31fd45fd4c8b4314cdf\n"},{"mutator":{"mutatorName":"statement/remove","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\t_ = config\n\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.23\" with checksum b3ee85228a051d960992ed6d78c1b01e\n"},{"mutator":{"mutatorName":"statement/remove","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\tapplyNeptuneOverrides(config)\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nconst (\n\tproviderNeo4j        = \"neo4j\"\n\tproviderNeptune      = \"neptune\"\n\tenvProduction        = \"production\"\n\tenvDevelopment       = \"development\"\n\tdefaultNeo4jUsername = \"neo4j\"\n)\n\n// Config holds the application configuration\ntype Config struct {\n\tEnvironment string             `json:\"environment\"`\n\tGraphDB     GraphServiceConfig `json:\"graph_db\"`\n}\n\n// LoadConfig loads configuration from environment and defaults\nfunc LoadConfig() (*Config, error) {\n\tconfig := \u0026Config{\n\t\tEnvironment: getEnvOrDefault(\"ENVIRONMENT\", \"development\"),\n\t\tGraphDB:     getDefaultGraphServiceConfig(),\n\t}\n\n\tapplyEnvironmentOverrides(config)\n\treturn config, nil\n}\n\n// applyEnvironmentOverrides applies environment variable overrides to config\nfunc applyEnvironmentOverrides(config *Config) {\n\tif provider := os.Getenv(\"GRAPH_DB_PROVIDER\"); provider != \"\" {\n\t\tconfig.GraphDB.Provider = provider\n\t}\n\n\tapplyNeo4jOverrides(config)\n\t_ = config\n\n}\n\n// applyNeo4jOverrides applies Neo4j environment variable overrides\nfunc applyNeo4jOverrides(config *Config) {\n\tif uri := os.Getenv(\"NEO4J_URI\"); uri != \"\" {\n\t\tconfig.GraphDB.Neo4j.URI = uri\n\t}\n\tif username := os.Getenv(\"NEO4J_USERNAME\"); username != \"\" {\n\t\tconfig.GraphDB.Neo4j.Username = username\n\t}\n\tif password := os.Getenv(\"NEO4J_PASSWORD\"); password != \"\" {\n\t\tconfig.GraphDB.Neo4j.Password = password\n\t}\n}\n\n// applyNeptuneOverrides applies Neptune environment variable overrides\nfunc applyNeptuneOverrides(config *Config) {\n\tif endpoint := os.Getenv(\"NEPTUNE_ENDPOINT\"); endpoint != \"\" {\n\t\tconfig.GraphDB.Neptune.Endpoint = endpoint\n\t}\n\tif region := os.Getenv(\"NEPTUNE_REGION\"); region != \"\" {\n\t\tconfig.GraphDB.Neptune.Region = region\n\t}\n}\n\n// LoadConfigFromFile loads configuration from a JSON file\nfunc LoadConfigFromFile(filename string) (*Config, error) {\n\tdata, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config file: %w\", err)\n\t}\n\n\tvar config Config\n\tif err := json.Unmarshal(data, \u0026config); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse config file: %w\", err)\n\t}\n\n\treturn \u0026config, nil\n}\n\n// SaveConfigToFile saves configuration to a JSON file\nfunc SaveConfigToFile(config *Config, filename string) error {\n\tdata, err := json.MarshalIndent(config, \"\", \"  \")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to marshal config: %w\", err)\n\t}\n\n\tif err := os.WriteFile(filename, data, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write config file: %w\", err)\n\t}\n\n\treturn nil\n}\n\n// getDefaultGraphServiceConfig returns default graph service configuration\nfunc getDefaultGraphServiceConfig() GraphServiceConfig {\n\tenvironment := getEnvOrDefault(\"ENVIRONMENT\", \"development\")\n\n\tif environment == envProduction {\n\t\treturn GraphServiceConfig{\n\t\t\tProvider: providerNeptune,\n\t\t\tNeptune: struct {\n\t\t\t\tEndpoint string `json:\"endpoint\"`\n\t\t\t\tRegion   string `json:\"region\"`\n\t\t\t}{\n\t\t\t\tEndpoint: getEnvOrDefault(\"NEPTUNE_ENDPOINT\", \"\"),\n\t\t\t\tRegion:   getEnvOrDefault(\"NEPTUNE_REGION\", \"us-east-1\"),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn GraphServiceConfig{\n\t\tProvider: providerNeo4j,\n\t\tNeo4j: struct {\n\t\t\tURI      string `json:\"uri\"`\n\t\t\tUsername string `json:\"username\"`\n\t\t\tPassword string `json:\"password\"`\n\t\t}{\n\t\t\tURI:      getEnvOrDefault(\"NEO4J_URI\", \"bolt://localhost:7687\"),\n\t\t\tUsername: getEnvOrDefault(\"NEO4J_USERNAME\", defaultNeo4jUsername),\n\t\t\tPassword: getEnvOrDefault(\"NEO4J_PASSWORD\", \"password\"),\n\t\t},\n\t}\n}\n\n// IsProduction checks if the application is running in production\nfunc (c *Config) IsProduction() bool {\n\treturn c.Environment == envProduction\n}\n\n// IsDevelopment checks if the application is running in development\nfunc (c *Config) IsDevelopment() bool {\n\treturn c.Environment == \"development\"\n}\n\n// Validate validates the configuration\nfunc (c *Config) Validate() error {\n\tif c.GraphDB.Provider == \"\" {\n\t\treturn fmt.Errorf(\"graph database provider is required\")\n\t}\n\n\treturn c.validateGraphDBProvider()\n}\n\n// validateGraphDBProvider validates the graph database provider configuration\nfunc (c *Config) validateGraphDBProvider() error {\n\tswitch c.GraphDB.Provider {\n\tcase providerNeo4j:\n\t\treturn c.validateNeo4jConfig()\n\tcase providerNeptune:\n\t\treturn c.validateNeptuneConfig()\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported graph database provider: %s\", c.GraphDB.Provider)\n\t}\n}\n\n// validateNeo4jConfig validates Neo4j configuration\nfunc (c *Config) validateNeo4jConfig() error {\n\tif c.GraphDB.Neo4j.URI == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j URI is required\")\n\t}\n\tif c.GraphDB.Neo4j.Username == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j username is required\")\n\t}\n\tif c.GraphDB.Neo4j.Password == \"\" {\n\t\treturn fmt.Errorf(\"Neo4j password is required\")\n\t}\n\treturn nil\n}\n\n// validateNeptuneConfig validates Neptune configuration\nfunc (c *Config) validateNeptuneConfig() error {\n\tif c.GraphDB.Neptune.Endpoint == \"\" {\n\t\treturn fmt.Errorf(\"Neptune endpoint is required\")\n\t}\n\tif c.GraphDB.Neptune.Region == \"\" {\n\t\treturn fmt.Errorf(\"Neptune region is required\")\n\t}\n\treturn nil\n}\n","originalFilePath":"config.go","originalStartLine":0},"diff":"","processOutput":"FAIL \"/tmp/go-mutesting-3054773129/config.go.24\" with checksum 5b7eac99bebe46df00b2413ef9bebff3\n"}],"timeouted":null,"killed":null,"errored":null}