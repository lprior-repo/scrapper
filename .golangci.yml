# The version of the configuration file format. Version "2" is the latest and recommended.
version: '2'

# The `run` section contains global settings for the linter execution.
run:
  # Timeout for the entire analysis. A safety net to prevent CI from getting stuck.
  # 5 minutes is a reasonable default for most projects.
  timeout: 5m

  # Explicitly set the Go version to be used for analysis. This should match the
  # version in your project's go.mod file to ensure consistent and correct analysis.
  go: '1.24'

  # In CI, it's best practice to ensure the linter doesn't modify go.mod/go.sum.
  modules-download-mode: readonly

# The `linters` section defines which linters are enabled and their settings.
linters:
  # By setting `default: none`, we ensure that only the linters explicitly listed
  # in the `enable` section are run. This makes the configuration reproducible and
  # prevents new linters from being enabled automatically on tool updates.
  default: none
  enable:
    # --- Core Linters (Non-Negotiable) ---
    # These linters form the foundation of a high-quality Go codebase.
    - govet # The official Go vet tool; finds common errors. High signal, no performance cost.
    - staticcheck # The single most valuable linter. A huge set of high-confidence checks for bugs, performance, and simplifications.
    - unused # Checks for unused code (constants, variables, functions, types). Essential for code health.
    - errcheck # Ensures errors are checked. See `linters-settings` for essential configuration.
    - ineffassign # Detects useless variable assignments.

    # --- Bug Prevention (High-Value) ---
    # These linters catch common, subtle bugs that can lead to runtime issues.
    - bodyclose # Ensures response bodies are closed to prevent resource leaks.
    - contextcheck # Checks for correct passing of `context.Context` as the first argument.
    - copyloopvar # Catches a common bug with loop variable closures (critical for Go < 1.22).
    - errorlint # Enforces correct error wrapping checks using `errors.Is`/`As`.
    - nilerr # Finds code that returns `nil` for an error after a non-nil error check.
    - rowserrcheck # Checks for unchecked errors on `sql.Rows` iteration.
    - sqlclosecheck # Checks that `sql.Rows` and `sql.Stmt` are closed.
    - gosec # The standard for Go security analysis. See `exclusions` for test file configuration.

    # --- Style, Readability & Complexity ---
    # These linters enforce conventions that make code easier to read, understand, and maintain.
    - cyclop # Checks for overly complex functions. See settings for complexity threshold.
    - gocritic # A powerful meta-linter with a wide range of checks. See settings for enabled tags.
    - goconst # Finds repeated strings that could be constants.
    - revive # A fast, configurable replacement for the deprecated `golint`.

    # --- Testing ---
    # These linters improve the quality and correctness of test code.
    - testifylint # For projects using the `testify` suite, checks for correct usage.
    - thelper # Enforces `t.Helper()` in test helper functions for better error reporting.
    # - paralleltest  # Disabled per user request - not requiring t.Parallel() calls

  # The `linters-settings` section provides fine-grained configuration for specific linters.
  settings:
    # Configure `errcheck` to ignore common, safe cases of unchecked errors.
    errcheck:
      # A list of functions to exclude from checking. This is essential for reducing noise.
      exclude-functions:
        - fmt.Fprintf
        - fmt.Fprintln
        - fmt.Fprint
        - (*bytes.Buffer).Write
        - (*bytes.Buffer).WriteString
        - (*bytes.Buffer).WriteByte
        - (*bytes.Buffer).WriteRune
        - (*os.File).Close
        - (*log.Logger).Print
        - (*log.Logger).Printf
        - (*log.Logger).Println

    # Configure `gocritic` to enable specific categories of checks.
    gocritic:
      # Enabling these tags provides a good balance of useful checks without being overly pedantic.
      enabled-tags:
        - diagnostic
        - experimental
        - performance
        - style
      disabled-checks:
        - dupImport # Handled by goimports
        - ifElseChain # Sometimes necessary for clarity
        - octalLiteral # Sometimes intentional
        - whyNoLint # We'll use explanations
        - wrapperFunc # Sometimes necessary for abstractions
        - importShadow # Sometimes unavoidable
        - unnamedResult # Sometimes clearer without names
        - hugeParam # Don't want to use pointers unless absolutely necessary
      settings:
        captLocal:
          paramsOnly: true
        elseif:
          skipBalanced: true
        rangeExprCopy:
          sizeThreshold: 512
        rangeValCopy:
          sizeThreshold: 128
        underef:
          skipRecvDeref: true

    # Set a strict cyclomatic complexity limit for `cyclop` (aligned with CLAUDE.md).
    # A value of 5 is stricter than the typical 15, enforcing simpler functions.
    cyclop:
      max-complexity: 5
      package-average: 3.0
      skip-tests: false

    # Configure `goconst` to find repeated strings that could be constants.
    goconst:
      min-len: 2
      min-occurrences: 2
      ignore-tests: false
      match-constant: true
      numbers: false
      min-digits: 3
      ignore-calls: true

    # Configure `revive` with a comprehensive set of rules.
    revive:
      rules:
        - name: atomic
        - name: blank-imports
        - name: bool-literal-in-expr
        - name: confusing-naming
        - name: constant-logical-expr
        - name: context-as-argument
        - name: context-keys-type
        - name: deep-exit
        - name: defer
        - name: dot-imports
        - name: duplicated-imports
        - name: early-return
        - name: empty-block
        - name: empty-lines
        - name: error-naming
        - name: error-return
        - name: error-strings
        - name: errorf
        - name: exported
        - name: function-result-limit
          arguments: [2]
        - name: get-return
        - name: identical-branches
        - name: if-return
        - name: increment-decrement
        - name: indent-error-flow
        - name: max-public-structs
          arguments: [6]
        - name: modifies-parameter
        - name: modifies-value-receiver
        - name: package-comments
        - name: range
        - name: receiver-naming
        - name: redefines-builtin-id
        - name: string-of-int
        - name: superfluous-else
        - name: time-naming
        - name: unconditional-recursion
        - name: unexported-naming
        - name: unexported-return
        - name: unnecessary-stmt
        - name: unreachable-code
        - name: unused-parameter
        - name: unused-receiver
        - name: useless-break
        - name: var-declaration
        - name: var-naming

    # Configure `staticcheck` to disable capitalization check for error strings
    staticcheck:
      checks: ['all', '-ST1005'] # Disable error string capitalization rule

    # Configure `gosec` (reduce noise in test files).
    gosec:
      includes:
        - G101 # Look for hard coded credentials
        - G102 # Bind to all interfaces
        - G103 # Audit the use of unsafe block
        - G104 # Audit errors not checked
        - G106 # Audit the use of ssh.InsecureIgnoreHostKey
        - G107 # Url provided to HTTP request as taint input
        - G108 # Profiling endpoint automatically exposed on /debug/pprof
        - G109 # Potential Integer overflow made by strconv.Atoi result conversion to int16/32
        - G110 # Potential DoS vulnerability via decompression bomb
        - G201 # SQL query construction using format string
        - G202 # SQL query construction using string concatenation
        - G203 # Use of unescaped data in HTML templates
        - G204 # Audit use of command execution
        - G301 # Poor file permissions used when creating a directory
        - G302 # Poor file permissions used with chmod
        - G303 # Creating tempfile using a predictable path
        - G305 # File traversal when extracting zip/tar archive
        - G306 # Poor file permissions used when writing to a new file
        - G307 # Poor file permissions used when creating a file with os.Create
        - G401 # Detect the usage of DES, RC4, MD5 or SHA1
        - G402 # Look for bad TLS connection settings
        - G403 # Ensure minimum RSA key length of 2048 bits
        - G404 # Insecure random number source (rand)
        - G501 # Import blocklist: crypto/md5
        - G502 # Import blocklist: crypto/des
        - G503 # Import blocklist: crypto/rc4
        - G504 # Import blocklist: net/http/cgi
        - G505 # Import blocklist: crypto/sha1
        - G601 # Implicit memory aliasing of items from a range statement
      config:
        G306: '0644'
        G307: '0644'

    # Configure `testifylint` for correct testify usage.
    testifylint:
      disable-all: false
      enable:
        - bool-compare
        - compares
        - empty
        - error-is-as
        - error-nil
        - expected-actual
        - go-require
        - float-compare
        - len
        - nil-compare
        - require-error
        - suite-dont-use-pkg
        - suite-extra-assert-call
        - suite-thelper

    # Configure `govet` with comprehensive checks.
    govet:
      enable-all: false
      enable:
        - asmdecl
        - assign
        - atomic
        - bools
        - buildtag
        - cgocall
        - composites
        - copylocks
        - deepequalerrors
        - errorsas
        - framepointer
        - httpresponse
        - ifaceassert
        - loopclosure
        - lostcancel
        - nilfunc
        - printf
        - shift
        - sigchanyzer
        - stdmethods
        - stringintconv
        - structtag
        - tests
        - unmarshal
        - unreachable
        - unsafeptr
        - unusedresult

# The `formatters` section is new in v2 and separates formatting from linting.
formatters:
  enable:
    - gofmt # The standard Go formatter.
    - goimports # Sorts imports and adds/removes them as needed.
    - gci # Provides more advanced import grouping capabilities.

# The `exclusions` section is for intelligently ignoring issues to reduce noise.
exclusions:
  # Use a more lenient pattern for detecting auto-generated files.
  generated: lax

  # Enable predefined sets of exclusion rules for common false positives.
  presets:
    - comments
    - std-error-handling
    - common-false-positives
    - legacy

  # Log a warning if an exclusion rule is unused, helping to keep the config clean.
  warn-unused: true

  # Define specific, fine-grained rules for ignoring issues.
  rules:
    # Exclude most linters from test files except testifylint and essential checks
    - path: _test\.go
      linters:
        - cyclop
        - gosec
        - goconst
        - gocritic
        - revive
        - gci
        - errorlint
        - ineffassign
        - unused
        - nilerr
        - bodyclose
        - contextcheck
        - copyloopvar
        - rowserrcheck
        - sqlclosecheck

    # Exclude `lll` (line length) issues for lines containing `go:generate`.
    - linters:
        - lll
      source: '^//go:generate '

    # Allow exported without comments in test files
    - path: _test\.go
      text: 'exported .* should have comment'
      linters:
        - revive

    # Allow package comments in non-main files
    - path: '\.go$'
      text: 'package-comments'
      linters:
        - revive

# The `issues` section controls how reported issues are handled.
issues:
  # Do not limit the number of reported issues. We want to see everything.
  max-issues-per-linter: 0
  max-same-issues: 0

  # Exclude default Go patterns for error handling.
  exclude-use-default: false

# Output configuration
output:
  formats:
    text:
      path: stdout
      color: true
  sort-results: true
  sort-order:
    - linter
    - severity
    - file
  show-stats: true

# Severity configuration
severity:
  default-severity: error
  case-sensitive: false
