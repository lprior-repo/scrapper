version: '3'

tasks:
  # Core Development Tasks
  setup:
    desc: Set up the development environment
    cmds:
      - echo "🧹 Performing cleanup for fresh start..."
      - go run . --cleanup || true
      - docker compose up -d neo4j
      - task: wait-for-neo4j
      - echo "Development environment ready"

  wait-for-neo4j:
    desc: Wait for Neo4j to be ready
    cmds:
      - |
        echo "Waiting for Neo4j to be ready..."
        timeout=60
        count=0
        until docker compose exec neo4j cypher-shell -u neo4j -p password "RETURN 1" > /dev/null 2>&1; do
          if [ $count -ge $timeout ]; then
            echo "Neo4j failed to start within ${timeout} seconds"
            exit 1
          fi
          echo "Neo4j is not ready yet. Waiting 5 seconds... (${count}/${timeout})"
          sleep 5
          count=$((count + 5))
        done
        echo "Neo4j is ready!"

  run:
    desc: Run the overseer application
    deps: [setup]
    cmds:
      - go run .

  # Testing Tasks
  test:
    desc: Run all tests including unit, property-based, integration, acceptance, and mutation tests
    deps: [setup]
    cmds:
      - echo "Running complete test suite..."
      - go test ./... -v -timeout=120s -skip TestComprehensiveMutationTesting
      - echo "Running acceptance tests..."
      - go test ./... -v -run Acceptance -timeout=300s
      - echo "Running mutation testing in critical mode..."
      - MUTATION_TEST_MODE=critical go test -v -run TestComprehensiveMutationTesting -timeout=20m
      - echo "All tests completed successfully!"

  test-unit:
    desc: Run unit tests only
    deps: [setup]
    cmds:
      - go test ./... -v -short -timeout=60s

  test-integration:
    desc: Run integration tests only
    deps: [setup]
    cmds:
      - go test ./... -v -run Integration

  test-acceptance:
    desc: Run acceptance tests only
    deps: [setup]
    cmds:
      - go test ./... -v -run Acceptance -timeout=300s

  test-mutation-fast:
    desc: Run fast mutation tests (critical files only, 5 min timeout)
    deps: [setup]
    cmds:
      - echo "Running fast mutation testing..."
      - MUTATION_TEST_MODE=fast go test -v -run TestComprehensiveMutationTesting -timeout=10m
      - echo "Fast mutation testing completed!"

  test-mutation-critical:
    desc: Run critical mutation tests (core business logic, 15 min timeout)
    deps: [setup]
    cmds:
      - echo "Running critical mutation testing..."
      - MUTATION_TEST_MODE=critical go test -v -run TestComprehensiveMutationTesting -timeout=20m
      - echo "Critical mutation testing completed!"

  test-mutation-comprehensive:
    desc: Run comprehensive mutation tests (entire codebase, 45 min timeout)
    deps: [setup]
    cmds:
      - echo "Running comprehensive mutation testing..."
      - MUTATION_TEST_MODE=comprehensive go test -v -run TestComprehensiveMutationTesting -timeout=50m
      - echo "Comprehensive mutation testing completed!"

  # Quality Tasks
  lint:
    desc: Run golangci-lint with comprehensive checks
    cmds:
      - golangci-lint run --config .golangci.yml --verbose
      - echo "Linting completed successfully!"

  fix:
    desc: Auto-fix Go code issues
    cmds:
      - echo "🔧 Auto-fixing Go code..."
      - golangci-lint run --config .golangci.yml --fix --verbose
      - go fmt ./...

  security:
    desc: Run security analysis
    cmds:
      - gosec -fmt=json -out=gosec-report.json ./...
      - echo "Security analysis completed! Check gosec-report.json for results."

  coverage:
    desc: Run tests with coverage analysis
    deps: [setup]
    cmds:
      - go test -v -race -coverprofile=coverage.out -covermode=atomic -timeout=300s ./...
      - go tool cover -html=coverage.out -o coverage.html
      - go tool cover -func=coverage.out
      - echo "Coverage analysis completed! Open coverage.html in a browser."

  check-coverage:
    desc: Check if test coverage meets minimum requirements (95%)
    deps: [coverage]
    cmds:
      - |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "${COVERAGE} < 95" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below required 95%"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets the requirement!"
        fi

  quality:
    desc: Run comprehensive code quality checks
    deps: [setup]
    cmds:
      - task: lint
      - task: security
      - task: check-coverage
      - task: test
      - echo "✅ All quality checks passed!"

  quality-fast:
    desc: Run fast code quality checks (for CI)
    deps: [setup]
    cmds:
      - task: lint
      - task: security
      - task: check-coverage
      - task: test-mutation-fast
      - echo "✅ Fast quality checks passed!"

  ci:
    desc: Run the same checks as CI
    deps: [setup]
    cmds:
      - task: quality-fast
      - echo "✅ CI checks completed successfully!"

  # Build Tasks
  build:
    desc: Build Go backend
    cmds:
      - echo "📦 Building Go backend..."
      - go build -o bin/overseer .

  # Clean Tasks
  clean:
    desc: Clean up development environment
    cmds:
      - docker compose down
      - docker volume rm scrapper_neo4j_data scrapper_neo4j_logs || true
      - rm -f coverage.out coverage.html gosec-report.json
      - rm -rf bin/

  reset:
    desc: Reset the development environment
    cmds:
      - task: clean
      - task: setup

  # Development Server Tasks
  dev:
    desc: Start the full development stack (database, API, frontend)
    deps: [setup]
    cmds:
      - task: start-api &
      - task: start-frontend &
      - echo "🚀 Full stack started{{":"}}
      - echo "  📊 Neo4j{{":"}} http{{":"}}//localhost{{":"}}7474"
      - echo "  🔧 API{{":"}} http{{":"}}//localhost{{":"}}8081"
      - echo "  🌐 Frontend{{":"}} http{{":"}}//localhost{{":"}}3000"
      - echo ""
      - echo "Use Ctrl+C to stop all services"
      - wait

  start-api:
    desc: Start the backend API server
    deps: [setup]
    cmds:
      - echo "🔧 Starting API server on port 8081..."
      - go run . api

  start-frontend:
    desc: Start the frontend development server
    cmds:
      - echo "🌐 Starting frontend on port 3000..."
      - cd ui && bun run dev

  stop:
    desc: Stop all development services
    cmds:
      - echo "🛑 Stopping all services..."
      - go run . cleanup
      - echo "✅ All services stopped"

  restart:
    desc: Restart the full development stack
    cmds:
      - task: stop
      - task: dev

  logs:
    desc: Show Neo4j logs
    cmds:
      - docker compose logs -f neo4j

  # Frontend Tasks
  setup-frontend:
    desc: Setup frontend development environment
    cmds:
      - echo "📦 Installing frontend dependencies..."
      - cd ui && bun install
      - echo "🎭 Installing Playwright browsers..."
      - cd ui && bunx playwright install

  build-frontend:
    desc: Build the frontend for production
    cmds:
      - echo "📦 Building frontend..."
      - cd ui && bun run build

  test-frontend:
    desc: Run frontend tests (unit, lint, e2e)
    cmds:
      - echo "🧪 Running frontend tests..."
      - cd ui && bun run lint
      - cd ui && bun run test
      - cd ui && bun run playwright

  lint-frontend:
    desc: Run TypeScript linting
    cmds:
      - echo "🔍 Running TypeScript linting..."
      - cd ui && bun run lint

  fix-frontend:
    desc: Auto-fix TypeScript code issues
    cmds:
      - echo "🔧 Auto-fixing TypeScript code..."
      - cd ui && bun run lint --fix

  # Full Stack Tasks
  dev-full:
    desc: Setup and start the complete development environment
    cmds:
      - task: setup-frontend
      - task: dev

  test-all:
    desc: Run all tests across Go and TypeScript ecosystems
    deps: [setup, setup-frontend]
    cmds:
      - echo "🧪 Running comprehensive test suite across all ecosystems..."
      - task: test
      - echo "🎭 Running acceptance tests..."
      - task: test-acceptance
      - cd ui && bun run test:coverage
      - cd ui && bun run test:mutation
      - cd ui && bun run playwright
      - echo "✅ All ecosystem tests completed!"

  lint-all:
    desc: Run linting across all ecosystems
    deps: [setup-frontend]
    cmds:
      - echo "🔍 Running linting across all ecosystems..."
      - task: lint
      - task: lint-frontend
      - echo "✅ All linting completed!"

  fix-all:
    desc: Auto-fix issues across all ecosystems
    cmds:
      - echo "🔧 Auto-fixing issues across all ecosystems..."
      - task: fix
      - task: fix-frontend
      - echo "✅ Auto-fix completed!"

  build-all:
    desc: Build both backend and frontend
    deps: [setup, setup-frontend]
    cmds:
      - echo "📦 Building all components..."
      - task: build
      - task: build-frontend
      - echo "✅ All builds completed!"

  clean-all:
    desc: Clean all build artifacts and test outputs
    cmds:
      - echo "🧹 Cleaning all artifacts..."
      - task: clean
      - cd ui && rm -rf coverage/ dist/ node_modules/.cache/
      - cd ui && rm -rf stryker-tmp/ mutation-report.html
      - echo "✅ All artifacts cleaned!"

  # Utility Tasks
  scan:
    desc: Scan a GitHub organization and visualize codeowners
    cmds:
      - echo "🔍 Starting GitHub codeowner scanner..."
      - echo "1. Start the development stack with{{":"}} task dev"
      - echo "2. Open http{{":"}}//localhost{{":"}}3000 in your browser"
      - echo "3. Enter your GitHub organization name and token"
      - echo "4. Click 'Scan Organization' to import data"
      - echo "5. View the interactive visualization"

  # Pre-commit Tasks
  pre-commit:
    desc: Run all pre-commit quality checks
    cmds:
      - ./pre-commit full

  pre-commit-quick:
    desc: Run quick pre-commit checks (fast mutation testing)
    cmds:
      - ./pre-commit quick

  commit:
    desc: Create an atomic commit with all quality checks
    cmds:
      - echo "🔄 Creating atomic commit with full quality checks..."
      - ./pre-commit full
      - git add .
      - git commit -m "{{.CLI_ARGS}}"
      - echo "✅ Atomic commit completed!"

  commit-quick:
    desc: Commit only staged changes with quick quality checks
    cmds:
      - echo "🔄 Committing staged changes..."
      - ./pre-commit quick
      - git commit -m "{{.CLI_ARGS}}"
      - echo "✅ Staged commit completed!"