version: '3'

tasks:
  # Essential Commands
  setup:
    desc: Complete setup for initial clone (infrastructure + dependencies + build)
    cmds:
      - echo "🚀 Setting up complete development environment..."
      - echo "🐳 Starting infrastructure..."
      - docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d neo4j
      - task: wait-for-neo4j
      - echo "📦 Installing all dependencies..."
      - bun install
      - cd packages/webapp && bun install
      - bunx playwright install
      - echo "🔨 Building application..."
      - go build -o bin/overseer .
      - cd packages/webapp && bun run build
      - echo "✅ Complete setup finished - ready for development!"

  test:
    desc: Run complete test suite with infrastructure at maximum speed
    cmds:
      - echo "🚀 Running complete test suite at maximum speed..."
      - task: ensure-neo4j-running
      - task: setup-dependencies
      - echo "📦 Running Go unit tests..."
      - go test ./... -v -timeout=60s -skip TestComprehensiveMutationTesting
      - echo "🎯 Running Go acceptance tests..."
      - go test ./... -v -run Acceptance -timeout=180s
      - echo "🌐 Starting API server for testing..."
      - task: start-api-for-testing
      - echo "🔍 Running API health tests..."
      - task: test-api-health
      - echo "⚙️ Running API functional tests..."
      - task: test-api-functional
      - echo "🔍 Running API edge case tests..."
      - task: test-api-edge-cases
      - echo "🎨 Running frontend tests..."
      - task: test-frontend-unit
      - echo "🎭 Running Playwright E2E tests..."
      - task: playwright
      - task: stop-api-for-testing
      - task: cleanup-test-database
      - echo "✅ All tests completed successfully!"

  dev:
    desc: Start development environment at maximum speed
    cmds:
      - echo "🚀 Starting development stack..."
      - task: ensure-neo4j-running
      - task: setup-dependencies
      - echo "🚀 Starting services..."
      - echo "  📊 Neo4j{{":"}} http{{":"}}//localhost{{":"}}7474"
      - echo "  🔧 API{{":"}} http{{":"}}//localhost{{":"}}8081"
      - echo "  🌐 Frontend{{":"}} http{{":"}}//localhost{{":"}}3000"
      - echo ""
      - echo "Starting services concurrently... Press Ctrl+C to stop all services."
      - ./start-dev.sh

  build:
    desc: Build all components
    cmds:
      - echo "🔨 Building all components..."
      - go build -o bin/overseer .
      - cd packages/webapp && bun run build
      - echo "✅ Build completed!"

  clean:
    desc: Clean up development environment
    cmds:
      - echo "🧹 Cleaning up..."
      - go run . --cleanup || true
      - docker compose down
      - rm -f coverage.out coverage.html gosec-report.json
      - rm -rf bin/
      - rm -rf packages/webapp/dist/
      - echo "✅ Cleanup completed!"

  api-start:
    desc: Start API server and infrastructure for testing without running hurl tests
    cmds:
      - echo "🚀 Starting API server and infrastructure for testing..."
      - task: ensure-neo4j-running
      - task: setup-dependencies
      - task: cleanup-test-database
      - task: start-api-for-testing
      - echo "✅ API server and infrastructure ready for testing!"

  # Internal/Support Tasks
  ensure-neo4j-running:
    desc: Ensure Neo4j is running (don't restart if already up)
    cmds:
      - |
        if ! docker compose exec neo4j cypher-shell -u neo4j -p password "RETURN 1" > /dev/null 2>&1; then
          echo "Starting Neo4j..."
          docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d neo4j
          task wait-for-neo4j
        else
          echo "Neo4j already running"
        fi

  wait-for-neo4j:
    desc: Wait for Neo4j to be ready
    cmds:
      - |
        echo "Waiting for Neo4j to be ready..."
        timeout=60
        count=0
        until docker compose exec neo4j cypher-shell -u neo4j -p password "RETURN 1" > /dev/null 2>&1; do
          if [ $count -ge $timeout ]; then
            echo "Neo4j failed to start within ${timeout} seconds"
            exit 1
          fi
          echo "Neo4j is not ready yet. Waiting 2 seconds... (${count}/${timeout})"
          sleep 2
          count=$((count + 2))
        done
        echo "Neo4j is ready!"

  setup-dependencies:
    desc: Install dependencies only when needed
    cmds:
      - bun install
      - cd packages/webapp && bun install
    sources:
      - package.json
      - packages/webapp/package.json
    generates:
      - node_modules/.package-lock.json
      - packages/webapp/node_modules/.package-lock.json
    method: checksum

  start-api-for-testing:
    desc: Start API server for testing
    cmds:
      - |
        # Clean up any existing processes on ports
        lsof -ti:8081 | xargs -r kill -9 2>/dev/null || true
        lsof -ti:9094 | xargs -r kill -9 2>/dev/null || true
        sleep 1
        # Start API server in background
        go run . api > api_test.log 2>&1 &
        echo $! > api_test.pid
        
        # Wait for server to be ready
        echo "⏳ Waiting for API server to be ready..."
        timeout=30
        count=0
        until curl -s http://localhost:8081/api/health > /dev/null 2>&1; do
          if [ $count -ge $timeout ]; then
            echo "❌ API server failed to start within ${timeout} seconds"
            if [ -f api_test.pid ]; then
              kill $(cat api_test.pid) 2>/dev/null || true
              rm -f api_test.pid
            fi
            exit 1
          fi
          echo "API server not ready yet. Waiting 1 second... (${count}/${timeout})"
          sleep 1
          count=$((count + 1))
        done
        echo "✅ API server is ready!"

  stop-api-for-testing:
    desc: Stop API server after testing
    cmds:
      - |
        if [ -f api_test.pid ]; then
          kill $(cat api_test.pid) 2>/dev/null || true
          rm -f api_test.pid
        fi
        pkill -f "go run . api" 2>/dev/null || true
        lsof -ti:8081 | xargs -r kill -9 2>/dev/null || true
        lsof -ti:9094 | xargs -r kill -9 2>/dev/null || true
        echo "✅ API server stopped and ports cleaned"

  cleanup-test-database:
    desc: Clean up test database after test runs
    cmds:
      - |
        echo "🧹 Cleaning up test database..."
        docker compose exec neo4j cypher-shell -u neo4j -p password "MATCH (n) DETACH DELETE n" || true
        echo "✅ Test database cleaned"

  test-api-health:
    desc: Run health check API tests
    cmds:
      - hurl --test --variables-file tests/config/global.hurl tests/functional/health.hurl

  test-api-functional:
    desc: Run functional API tests
    internal: true
    cmds:
      - hurl --test --variables-file tests/config/global.hurl tests/functional/scan.hurl
      - hurl --test --variables-file tests/config/global.hurl tests/functional/graph.hurl
      - hurl --test --variables-file tests/config/global.hurl tests/functional/stats.hurl

  test-api-edge-cases:
    desc: Run edge case API tests (simplified)
    internal: true
    cmds:
      - hurl --test --variables-file tests/config/global.hurl tests/edge-cases/boundary-value-tests.hurl
      - hurl --test --variables-file tests/config/global.hurl tests/edge-cases/error-scenario-tests.hurl

  test-frontend-unit:
    desc: Run frontend unit tests
    internal: true
    cmds:
      - cd packages/webapp && bun run test

  playwright:
    desc: Run Playwright E2E tests with full setup and teardown
    cmds:
      - echo "🎭 Running Playwright E2E tests..."
      - bunx playwright test --config=playwright.config.ts
      - task: stop-api-for-testing
      - task: cleanup-test-database
      - echo "✅ Playwright tests completed!"