name: Lint

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  golangci:
    name: Go Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
      
      - name: Verify Go version
        run: go version
      
      - name: Download dependencies
        run: go mod download
      
      - name: Verify dependencies
        run: go mod verify
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=10m --verbose
          only-new-issues: false
          skip-cache: false
          skip-pkg-cache: false
          skip-build-cache: false
      
      - name: Run tests before linting (ensure test coverage)
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out
      
      - name: Check test coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${COVERAGE}%"
          # Enforce minimum 95% coverage as per CLAUDE.md
          if (( $(echo "${COVERAGE} < 95" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below required 95%"
            exit 1
          fi
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
      
      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out results.sarif ./...'
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
      
      - name: Run Nancy vulnerability scanner
        uses: sonatypecommunity/nancy-github-action@main
        with:
          nancyVersion: v1.0.46
      
      - name: Run Govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [golangci]
    
    services:
      neo4j:
        image: neo4j:5.15-community
        ports:
          - 7474:7474
          - 7687:7687
        env:
          NEO4J_AUTH: neo4j/password
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p password 'RETURN 1'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 40s
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
      
      - name: Install go-mutesting
        run: go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest
      
      - name: Wait for Neo4j
        run: |
          until nc -z localhost 7687; do
            echo "Waiting for Neo4j..."
            sleep 2
          done
      
      - name: Run mutation tests
        run: |
          chmod +x ./mutation_test.sh
          ./mutation_test.sh
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: password
      
      - name: Upload mutation test results
        uses: actions/upload-artifact@v4
        with:
          name: mutation-test-results
          path: mutation_report.txt
          retention-days: 30

  lint-summary:
    name: Lint Summary
    runs-on: ubuntu-latest
    needs: [golangci, security, dependency-check]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## Linting Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Go Linting**: ${{ needs.golangci.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Check**: ${{ needs.dependency-check.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.golangci.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.dependency-check.result }}" == "success" ]]; then
            echo "✅ All linting checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some linting checks failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
          fi